
# Git dan Github


### ðŸ“Œ **Konsep Dasar Git**  
**Git** adalah sistem kontrol versi (VCS) terdistribusi yang digunakan untuk melacak perubahan dalam kode, memungkinkan kolaborasi, dan mengelola proyek perangkat lunak dengan lebih efisien.

---

## ðŸ”¹ **1. Apa Itu Git?**
Git adalah alat yang memungkinkan:
- **Versi Kontrol**: Melacak perubahan kode dari waktu ke waktu.
- **Kolaborasi**: Memungkinkan banyak orang bekerja di proyek yang sama tanpa konflik.
- **Distribusi**: Setiap pengembang memiliki salinan lengkap dari repositori.

---

## ðŸ”¹ **2. Arsitektur & Cara Kerja Git**
Git memiliki tiga area utama:  

| **Area** | **Fungsi** |
|----------|------------|
| **Working Directory** | Tempat di mana file saat ini diedit. |
| **Staging Area** | Area persiapan sebelum file dikomit. |
| **Repository (Local Repo)** | Tempat penyimpanan perubahan yang telah dikomit. |
| **Remote Repository** | Repositori yang disimpan di server (GitHub, GitLab, dll.). |

âš¡ **Alur Kerja Git:**
1. **Edit File** â†’ di **Working Directory**.
2. **Tambah ke Staging Area** â†’ `git add file.txt`
3. **Commit ke Repository** â†’ `git commit -m "Pesan commit"`
4. **Push ke Remote Repo** â†’ `git push origin main`

---

## ðŸ”¹ **3. Perintah Dasar Git**
| Perintah | Fungsi |
|----------|--------|
| `git init` | Membuat repositori Git baru. |
| `git clone URL` | Mengunduh repositori dari remote. |
| `git add file.txt` | Menambahkan file ke staging area. |
| `git commit -m "Pesan"` | Menyimpan perubahan ke repositori lokal. |
| `git push origin main` | Mengunggah perubahan ke repositori remote. |
| `git pull origin main` | Mengambil perubahan terbaru dari remote. |
| `git status` | Melihat status perubahan file. |
| `git log` | Melihat riwayat commit. |
| `git branch feature-X` | Membuat branch baru. |
| `git checkout feature-X` | Berpindah ke branch lain. |
| `git merge feature-X` | Menggabungkan branch ke branch utama. |

---

## ðŸ”¹ **4. Branching & Merging**
Git memungkinkan pengembang bekerja di fitur yang berbeda tanpa mengganggu kode utama.

1. **Membuat branch baru** â†’ `git branch feature-1`
2. **Beralih ke branch** â†’ `git checkout feature-1`
3. **Edit & commit perubahan** â†’ `git commit -m "Tambah fitur"`
4. **Kembali ke branch utama** â†’ `git checkout main`
5. **Gabungkan branch** â†’ `git merge feature-1`

**ðŸ”€ Git Flow Umum:**
- **`main`** â†’ Branch stabil (production).
- **`develop`** â†’ Branch pengembangan utama.
- **Feature Branches** â†’ Untuk fitur baru, lalu digabungkan ke `develop`.

---

## ðŸ”¹ **5. Remote Repository (GitHub, GitLab, Bitbucket)**
Git dapat terhubung ke layanan cloud seperti **GitHub** untuk kolaborasi.

1. **Tambahkan Remote Repo**:  
   ```
   git remote add origin https://github.com/user/repo.git
   ```
2. **Push kode ke GitHub**:  
   ```
   git push -u origin main
   ```
3. **Ambil perubahan dari GitHub**:  
   ```
   git pull origin main
   ```

---

## ðŸŽ¯ **Kesimpulan**
- **Git membantu dalam pengelolaan kode secara terstruktur.**
- **Memungkinkan banyak pengembang bekerja di proyek yang sama.**
- **Branching mempermudah pengembangan fitur tanpa mengganggu kode utama.**
- **Remote repository (seperti GitHub) membuat kolaborasi lebih mudah.**

âž¡ **Ada bagian yang ingin kamu eksplor lebih dalam?** ðŸš€
