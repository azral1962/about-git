[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Panduan Sederhana Setting-Up Knowledge Managemnt Sytems",
    "section": "",
    "text": "Pendahuluan",
    "crumbs": [
      "Pendahuluan"
    ]
  },
  {
    "objectID": "index.html#file-directory-repository-vault",
    "href": "index.html#file-directory-repository-vault",
    "title": "Panduan Sederhana Setting-Up Knowledge Managemnt Sytems",
    "section": "File, Directory, Repository, Vault",
    "text": "File, Directory, Repository, Vault\nDi dunia digital kita menghasilkan FILE, yang berisikan entah data biner atau data teks (text). Data teks sebenarnya juga data biner, tetapi dibatasi oleh kode teks seperti ASCII atau UTF-8. File data biner dan teks untuk dibaca mesin, sedangkan data teks biasanya untuk di baca juga oleh manUsia.\nProses yang kita lakukan pada level paling dasar adalah mengubah file input menjadi file output. Atau file versi lama menjadi file versi baru. Sedemikian penting file itu śehingga kita menyimpannya ke dalam sebuah repositori atau “lemari besi” (vault). Hampir selalu ada lebih dari satu files, sehinnga kita membri nama atau label pada file itu. Nama file adalah data teks, sehungga bisa dibaca manusia. Nama juga digunakan sebagi entry daro daftar isu (directoy. Sebuah directiory berisikan pohon dari folfers (Map), dan sebuah fiolder berisikan folder lain atu file.\n## Github: Bank Repositori\nSeperti uang yang lebih aman dan berguna disimpan, repository kiat bisa direpliksi di Github, dimana isi repository lokal sama dengan repository naster g=di Guthub. Dalam kondisi yang tidak kita harpkan, komputer kita rysa atau hilabg, kita bisa dsenfab nudah mereplikasi repository kiat di komputrer ayng baru, dengan mrngclone reoisutir ynag d=tersu=imaon di Bnak GIthub",
    "crumbs": [
      "Pendahuluan"
    ]
  },
  {
    "objectID": "index.html#git-github-dan-knowlegdde-nanagemen",
    "href": "index.html#git-github-dan-knowlegdde-nanagemen",
    "title": "Panduan Sederhana Setting-Up Knowledge Managemnt Sytems",
    "section": "Git GithuB dan KNowlegdde nanagemen",
    "text": "Git GithuB dan KNowlegdde nanagemen\nDalam berkreasi menghasilkan tulisan, paper, disertasi, konten, software kita sering menghadapi kebingungan, kelelahan, dan kebuntuan akibat sifat kompleksitas yang tinggi.\nBerbagai alat bantu digital telah sangat menolong, tetapi ancaman kompleksitas selalu mengancam. Akibatnya kalaupun tugas ini selesai, kualitas tidak maksimal, waktu terlalu lama, dan biaya yang dikeluarkan membengkak.\nJalan keluarnya adalah dengan menguraikan pekerjaan ke dalam potongan, tahapan, untuk dikrjakan sendiri atau parlelisasi.\nGit dan Github alat digital yang sangat berguna untuk mengelola berbagai potongan pekerjaan dan mendistribusinya pada banyak orang, dengan tetap menjaga integritas proyek.\nGit mengendalikan pnguraian pekerjaan ke dalam potongan-potongan penugasan, mencatat siapa yang mengambil potongan pekerjaan tertentu, lalu memantau penyelesaiainya. Pekerjaan juga dapat diurai ke dalam versi-versi, sehingga sebelum pengembangan versi baru selesai versi lama tetap tersedia.\nGit mengenal tiga tempat penyimpanan: lokal repository, staging, dan working space.\nAdapun Github menjadi pusat distribusi, sehingga Github menyimpan repositori utama (master atau main) dan setiap individu kontributor memiliki replikasi dari repositori master, yaitu replikasi lokal.\nSebagaimana diperlihatkan pada Gambar Figure 1, Github menjdi pusat dari banyak kontributor dengan repositori lokal masing masing. Git dan Github bekerjasama mengatur potongan mana yang dikerjakan kontributor tertentu, dan mencegah tumpang tindih atau pengerjaan bagian sama pada saat yang sama oleh kntributor yang berbeda.\n\n\n\n\n\n\nFigure 1: Git dan Github\n\n\n\nDari gambar ini, dapat dimengerti bahwa kontributor bekerja di working space, yang bila hasinya memuaskan, di kirim ke staging area (yang biasanya hidden dari kontrbutor ) untuk menunggu keputusan apakah hendak di commit ke local repository. Untuk proyek personal, proses berhenti cukup di sini\nBila diputuskan untuk untuk masuk ke repository utama, maka proses push diinisiasi, yang biasanya diterima kecuali bisa ada anomali seperti duplikasi kntributor tadi.\nMengingat pentingnya mengkombinasi personalisasi kontribusi (git) dan kolaborasi (Github) maka dipandang perlu akadmisi memanfaatkan alat bantu ini. Untuk itu tulisan ini dibuat.\nProses pembuatan tulisan ini menggunakan Git dan sedikit Github. Tulisan ini dibuat menggunakan texteditor, dengan format markdwon versi Quarto. This is a book created from markdown and executable code.",
    "crumbs": [
      "Pendahuluan"
    ]
  },
  {
    "objectID": "index.html#tejks-markdown-quarto",
    "href": "index.html#tejks-markdown-quarto",
    "title": "Panduan Sederhana Setting-Up Knowledge Managemnt Sytems",
    "section": "Tejks, Markdown, Quarto",
    "text": "Tejks, Markdown, Quarto\npada akhirnya isi file harus di jonsumsi pengguna. Ada 3 bentuk pernyajian yang umumnya dituntut orang: web pages (untuk dikonsumsi di komputer, PDF (untuk dibagikan dan dikonsmunsi melalui layar atau printer), atau docx untuk diedit swlanjutnya nenggunakan word processor\nDrngan menmbahkan kode-kode matking pasda file .Txt, dokumen berubah menh=jai .md.\nkendian bila ditambahjsn atribut yaml, maka foile berubah mnjadi .qmd yabg dunakan Quarto.\nTugas utama Quarto adalah merender file teks markdown .qmd menjsdi pageweb, pdf, docs, serta format lainya seperti latex",
    "crumbs": [
      "Pendahuluan"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Git dan Github",
    "section": "",
    "text": "1.0.1 📌 Konsep Dasar Git\nGit adalah sistem kontrol versi (VCS) terdistribusi yang digunakan untuk melacak perubahan dalam kode, memungkinkan kolaborasi, dan mengelola proyek perangkat lunak dengan lebih efisien.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Git dan Github</span>"
    ]
  },
  {
    "objectID": "intro.html#apa-itu-git",
    "href": "intro.html#apa-itu-git",
    "title": "1  Git dan Github",
    "section": "1.1 🔹 1. Apa Itu Git?",
    "text": "1.1 🔹 1. Apa Itu Git?\nGit adalah alat yang memungkinkan: - Versi Kontrol: Melacak perubahan kode dari waktu ke waktu. - Kolaborasi: Memungkinkan banyak orang bekerja di proyek yang sama tanpa konflik. - Distribusi: Setiap pengembang memiliki salinan lengkap dari repositori.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Git dan Github</span>"
    ]
  },
  {
    "objectID": "intro.html#arsitektur-cara-kerja-git",
    "href": "intro.html#arsitektur-cara-kerja-git",
    "title": "1  Git dan Github",
    "section": "1.2 🔹 2. Arsitektur & Cara Kerja Git",
    "text": "1.2 🔹 2. Arsitektur & Cara Kerja Git\nGit memiliki tiga area utama:\n\n\n\n\n\n\n\nArea\nFungsi\n\n\n\n\nWorking Directory\nTempat di mana file saat ini diedit.\n\n\nStaging Area\nArea persiapan sebelum file dikomit.\n\n\nRepository (Local Repo)\nTempat penyimpanan perubahan yang telah dikomit.\n\n\nRemote Repository\nRepositori yang disimpan di server (GitHub, GitLab, dll.).\n\n\n\n⚡ Alur Kerja Git: 1. Edit File → di Working Directory. 2. Tambah ke Staging Area → git add file.txt 3. Commit ke Repository → git commit -m \"Pesan commit\" 4. Push ke Remote Repo → git push origin main",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Git dan Github</span>"
    ]
  },
  {
    "objectID": "intro.html#perintah-dasar-git",
    "href": "intro.html#perintah-dasar-git",
    "title": "1  Git dan Github",
    "section": "1.3 🔹 3. Perintah Dasar Git",
    "text": "1.3 🔹 3. Perintah Dasar Git\n\n\n\nPerintah\nFungsi\n\n\n\n\ngit init\nMembuat repositori Git baru.\n\n\ngit clone URL\nMengunduh repositori dari remote.\n\n\ngit add file.txt\nMenambahkan file ke staging area.\n\n\ngit commit -m \"Pesan\"\nMenyimpan perubahan ke repositori lokal.\n\n\ngit push origin main\nMengunggah perubahan ke repositori remote.\n\n\ngit pull origin main\nMengambil perubahan terbaru dari remote.\n\n\ngit status\nMelihat status perubahan file.\n\n\ngit log\nMelihat riwayat commit.\n\n\ngit branch feature-X\nMembuat branch baru.\n\n\ngit checkout feature-X\nBerpindah ke branch lain.\n\n\ngit merge feature-X\nMenggabungkan branch ke branch utama.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Git dan Github</span>"
    ]
  },
  {
    "objectID": "intro.html#branching-merging",
    "href": "intro.html#branching-merging",
    "title": "1  Git dan Github",
    "section": "1.4 🔹 4. Branching & Merging",
    "text": "1.4 🔹 4. Branching & Merging\nGit memungkinkan pengembang bekerja di fitur yang berbeda tanpa mengganggu kode utama.\n\nMembuat branch baru → git branch feature-1\nBeralih ke branch → git checkout feature-1\nEdit & commit perubahan → git commit -m \"Tambah fitur\"\nKembali ke branch utama → git checkout main\nGabungkan branch → git merge feature-1\n\n🔀 Git Flow Umum: - main → Branch stabil (production). - develop → Branch pengembangan utama. - Feature Branches → Untuk fitur baru, lalu digabungkan ke develop.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Git dan Github</span>"
    ]
  },
  {
    "objectID": "intro.html#remote-repository-github-gitlab-bitbucket",
    "href": "intro.html#remote-repository-github-gitlab-bitbucket",
    "title": "1  Git dan Github",
    "section": "1.5 🔹 5. Remote Repository (GitHub, GitLab, Bitbucket)",
    "text": "1.5 🔹 5. Remote Repository (GitHub, GitLab, Bitbucket)\nGit dapat terhubung ke layanan cloud seperti GitHub untuk kolaborasi.\n\nTambahkan Remote Repo:\ngit remote add origin https://github.com/user/repo.git\nPush kode ke GitHub:\ngit push -u origin main\nAmbil perubahan dari GitHub:\ngit pull origin main",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Git dan Github</span>"
    ]
  },
  {
    "objectID": "intro.html#kesimpulan",
    "href": "intro.html#kesimpulan",
    "title": "1  Git dan Github",
    "section": "1.6 🎯 Kesimpulan",
    "text": "1.6 🎯 Kesimpulan\n\nGit membantu dalam pengelolaan kode secara terstruktur.\nMemungkinkan banyak pengembang bekerja di proyek yang sama.\nBranching mempermudah pengembangan fitur tanpa mengganggu kode utama.\nRemote repository (seperti GitHub) membuat kolaborasi lebih mudah.\n\n➡ Ada bagian yang ingin kamu eksplor lebih dalam? 🚀",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Git dan Github</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Contoh Praktis",
    "section": "",
    "text": "2.0.1 📌 Contoh Realistis Proyek Pembuatan Software di Linux dengan Git\nKita akan membuat proyek software sederhana bernama “MyApp”, sebuah program CLI yang ditulis dalam Python. Proyek ini akan menggunakan Git untuk mengelola versi dan berkolaborasi.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#inisialisasi-proyek",
    "href": "summary.html#inisialisasi-proyek",
    "title": "2  Contoh Praktis",
    "section": "2.1 🔹 1. Inisialisasi Proyek",
    "text": "2.1 🔹 1. Inisialisasi Proyek\n\n2.1.1 🔥 Langkah 1: Buat Direktori Proyek\nDi terminal Linux, jalankan:\nmkdir MyApp\ncd MyApp\n\n\n2.1.2 🔥 Langkah 2: Inisialisasi Git\ngit init\n📌 Git akan membuat repositori kosong di dalam folder proyek.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#menambahkan-file-awal",
    "href": "summary.html#menambahkan-file-awal",
    "title": "2  Contoh Praktis",
    "section": "2.2 🔹 2. Menambahkan File Awal",
    "text": "2.2 🔹 2. Menambahkan File Awal\n\n2.2.1 🔥 Langkah 3: Buat File Program Utama\nBuat file app.py:\ntouch app.py\nEdit app.py:\nprint(\"Hello, this is MyApp!\")\n\n\n2.2.2 🔥 Langkah 4: Tambahkan README\necho \"# MyApp\" &gt; README.md\n\n\n2.2.3 🔥 Langkah 5: Tambahkan File ke Git\ngit add app.py README.md\n📌 Perintah git add menambahkan file ke Staging Area.\n\n\n2.2.4 🔥 Langkah 6: Commit Perubahan\ngit commit -m \"Inisialisasi proyek dengan file utama dan README\"\n📌 Perintah git commit menyimpan perubahan ke dalam riwayat versi.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#menambahkan-remote-repository-github",
    "href": "summary.html#menambahkan-remote-repository-github",
    "title": "2  Contoh Praktis",
    "section": "2.3 🔹 3. Menambahkan Remote Repository (GitHub)",
    "text": "2.3 🔹 3. Menambahkan Remote Repository (GitHub)\nSekarang, kita ingin menyimpan proyek ini di GitHub.\n\n2.3.1 🔥 Langkah 7: Tambahkan Remote Repository\ngit remote add origin https://github.com/username/MyApp.git\n📌 Gantilah username dengan akun GitHub kamu.\n\n\n2.3.2 🔥 Langkah 8: Push Kode ke GitHub\ngit push -u origin main\n📌 Kode pertama kali diunggah ke GitHub pada branch main.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#pengembangan-fitur-baru-dengan-branch",
    "href": "summary.html#pengembangan-fitur-baru-dengan-branch",
    "title": "2  Contoh Praktis",
    "section": "2.4 🔹 4. Pengembangan Fitur Baru dengan Branch",
    "text": "2.4 🔹 4. Pengembangan Fitur Baru dengan Branch\nMisalnya, kita ingin menambahkan fitur baru: menampilkan waktu saat ini.\n\n2.4.1 🔥 Langkah 9: Buat dan Beralih ke Branch Baru\ngit branch feature-time\ngit checkout feature-time\n📌 Branch feature-time dibuat untuk pengembangan fitur tanpa mengganggu branch utama.\n\n\n2.4.2 🔥 Langkah 10: Edit app.py untuk Menampilkan Waktu\nEdit app.py:\nimport datetime\n\nprint(\"Hello, this is MyApp!\")\nprint(\"Current Time:\", datetime.datetime.now())\n\n\n2.4.3 🔥 Langkah 11: Commit Perubahan di Branch Fitur\ngit add app.py\ngit commit -m \"Menambahkan fitur waktu ke MyApp\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#menggabungkan-fitur-ke-main",
    "href": "summary.html#menggabungkan-fitur-ke-main",
    "title": "2  Contoh Praktis",
    "section": "2.5 🔹 5. Menggabungkan Fitur ke main",
    "text": "2.5 🔹 5. Menggabungkan Fitur ke main\nSetelah fitur selesai diuji, kita gabungkan ke branch main.\n\n2.5.1 🔥 Langkah 12: Pindah ke Branch main\ngit checkout main\n\n\n2.5.2 🔥 Langkah 13: Gabungkan Fitur\ngit merge feature-time\n📌 Branch feature-time digabungkan ke main.\n\n\n2.5.3 🔥 Langkah 14: Push Perubahan ke GitHub\ngit push origin main\n📌 Kode terbaru sekarang ada di GitHub.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#bekerja-dengan-tim-pull-request-dan-merge",
    "href": "summary.html#bekerja-dengan-tim-pull-request-dan-merge",
    "title": "2  Contoh Praktis",
    "section": "2.6 🔹 6. Bekerja dengan Tim (Pull Request dan Merge)",
    "text": "2.6 🔹 6. Bekerja dengan Tim (Pull Request dan Merge)\nJika bekerja dalam tim, biasanya: 1. Developer lain membuat branch fitur baru dan push ke GitHub: bash    git push origin feature-time 2. Di GitHub, developer membuat Pull Request dan meminta merge ke main. 3. Tim melakukan review kode dan menyetujui merge. 4. Merge dilakukan di GitHub atau melalui terminal: bash    git checkout main    git pull origin main",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#mengelola-bug-dan-revisi",
    "href": "summary.html#mengelola-bug-dan-revisi",
    "title": "2  Contoh Praktis",
    "section": "2.7 🔹 7. Mengelola Bug dan Revisi",
    "text": "2.7 🔹 7. Mengelola Bug dan Revisi\nMisalnya, kita menemukan bug di app.py.\n\n2.7.1 🔥 Langkah 15: Buat Branch untuk Perbaikan Bug\ngit branch fix-bug\ngit checkout fix-bug\nEdit app.py untuk memperbaiki bug, lalu:\ngit add app.py\ngit commit -m \"Memperbaiki bug dalam fitur waktu\"\ngit checkout main\ngit merge fix-bug\ngit push origin main",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#membuat-versi-rilis",
    "href": "summary.html#membuat-versi-rilis",
    "title": "2  Contoh Praktis",
    "section": "2.8 🔹 8. Membuat Versi Rilis",
    "text": "2.8 🔹 8. Membuat Versi Rilis\nSetelah pengembangan stabil, kita bisa membuat versi rilis.\n\n2.8.1 🔥 Langkah 16: Buat Tag untuk Rilis\ngit tag -a v1.0 -m \"Rilis pertama MyApp\"\ngit push origin v1.0\n📌 Git akan menandai versi v1.0 untuk rilis.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "summary.html#kesimpulan",
    "href": "summary.html#kesimpulan",
    "title": "2  Contoh Praktis",
    "section": "2.9 🎯 Kesimpulan",
    "text": "2.9 🎯 Kesimpulan\n\nGunakan Git untuk mengelola proyek dengan aman.\n\nGunakan branch untuk pengembangan fitur dan perbaikan bug.\n\nSimpan proyek di GitHub untuk kolaborasi dan backup.\n\nGunakan tagging (git tag) untuk merilis versi stabil.\n\n➡ Mau coba proyek lain atau ada pertanyaan? 🚀# Summary\nIn summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contoh Praktis</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]